diff --git a/examples/osgvolume/osgvolume.cpp b/examples/osgvolume/osgvolume.cpp
index 0390ca9..eb448f5 100644
--- a/examples/osgvolume/osgvolume.cpp
+++ b/examples/osgvolume/osgvolume.cpp
@@ -420,8 +420,10 @@ int main( int argc, char **argv )
     arguments.getApplicationUsage()->addCommandLineOption("--s_maxTextureSize <size>","Set the texture maximum resolution in the s (x) dimension.");
     arguments.getApplicationUsage()->addCommandLineOption("--t_maxTextureSize <size>","Set the texture maximum resolution in the t (y) dimension.");
     arguments.getApplicationUsage()->addCommandLineOption("--r_maxTextureSize <size>","Set the texture maximum resolution in the r (z) dimension.");
+    arguments.getApplicationUsage()->addCommandLineOption("--modulate-alpha-by-colour <colourModulate.x()> <colourModulate.y()> <colourModulate.z()> <colourModulate.w()>","For each pixel multiply the alpha value by the color.");
     arguments.getApplicationUsage()->addCommandLineOption("--modulate-alpha-by-luminance","For each pixel multiply the alpha value by the luminance.");
     arguments.getApplicationUsage()->addCommandLineOption("--replace-alpha-with-luminance","For each pixel set the alpha value to the luminance.");
+    arguments.getApplicationUsage()->addCommandLineOption("--replace-alpha-with-luminance-inverted","For each pixel set the alpha value to 1-luminance.");
     arguments.getApplicationUsage()->addCommandLineOption("--replace-rgb-with-luminance","For each rgb pixel convert to the luminance.");
     arguments.getApplicationUsage()->addCommandLineOption("--num-components <num>","Set the number of components to in he target image.");
     arguments.getApplicationUsage()->addCommandLineOption("--no-rescale","Disable the rescaling of the pixel data to 0.0 to 1.0 range");
@@ -566,7 +568,9 @@ int main( int argc, char **argv )
     while(arguments.read("--modulate-alpha-by-luminance")) { colourSpaceOperation = osg::MODULATE_ALPHA_BY_LUMINANCE; }
     while(arguments.read("--modulate-alpha-by-colour", colourModulate.x(),colourModulate.y(),colourModulate.z(),colourModulate.w() )) { colourSpaceOperation = osg::MODULATE_ALPHA_BY_COLOR; }
     while(arguments.read("--replace-alpha-with-luminance")) { colourSpaceOperation = osg::REPLACE_ALPHA_WITH_LUMINANCE; }
+    while(arguments.read("--replace-alpha-with-luminance-inverted")) { colourSpaceOperation = osg::REPLACE_ALPHA_WITH_LUMINANCE_INVERTED; }
     while(arguments.read("--replace-rgb-with-luminance")) { colourSpaceOperation = osg::REPLACE_RGB_WITH_LUMINANCE; }
+    
 
 
     enum RescaleOperation
diff --git a/include/osg/ImageUtils b/include/osg/ImageUtils
index a79d739..9ce09fd 100644
--- a/include/osg/ImageUtils
+++ b/include/osg/ImageUtils
@@ -233,6 +233,7 @@ enum ColorSpaceOperation
     MODULATE_ALPHA_BY_LUMINANCE,
     MODULATE_ALPHA_BY_COLOR,
     REPLACE_ALPHA_WITH_LUMINANCE,
+    REPLACE_ALPHA_WITH_LUMINANCE_INVERTED,
     REPLACE_RGB_WITH_LUMINANCE
 };
 
diff --git a/src/osg/ImageUtils.cpp b/src/osg/ImageUtils.cpp
index 6131630..b94ac71 100644
--- a/src/osg/ImageUtils.cpp
+++ b/src/osg/ImageUtils.cpp
@@ -643,6 +643,17 @@ struct ReplaceAlphaWithLuminanceOperator
     inline void rgba(float& r,float& g,float& b,float& a) const { float l = (r+g+b)*0.3333333; a = l; }
 };
 
+struct ReplaceAlphaWithLuminanceInvertedOperator
+{
+    ReplaceAlphaWithLuminanceInvertedOperator() {}
+
+    inline void luminance(float&) const {}
+    inline void alpha(float&) const {}
+    inline void luminance_alpha(float& l,float& a) const { a = 1.0-l; }
+    inline void rgb(float&,float&,float&) const { }
+    inline void rgba(float& r,float& g,float& b,float& a) const { float l = (r+g+b)*0.3333333; a = 1.0-l; }
+};
+
 osg::Image* colorSpaceConversion(ColorSpaceOperation op, osg::Image* image, const osg::Vec4& colour)
 {
     GLenum requiredPixelFormat = image->getPixelFormat();
@@ -651,6 +662,7 @@ osg::Image* colorSpaceConversion(ColorSpaceOperation op, osg::Image* image, cons
         case (MODULATE_ALPHA_BY_LUMINANCE):
         case (MODULATE_ALPHA_BY_COLOR):
         case (REPLACE_ALPHA_WITH_LUMINANCE):
+        case (REPLACE_ALPHA_WITH_LUMINANCE_INVERTED):
             if (image->getPixelFormat()==GL_RGB || image->getPixelFormat()==GL_BGR) requiredPixelFormat = GL_RGBA;
             break;
         case (REPLACE_RGB_WITH_LUMINANCE):
@@ -690,6 +702,12 @@ osg::Image* colorSpaceConversion(ColorSpaceOperation op, osg::Image* image, cons
             osg::modifyImage(image, ReplaceAlphaWithLuminanceOperator());
             return image;
         }
+        case (REPLACE_ALPHA_WITH_LUMINANCE_INVERTED):
+        {
+            OSG_NOTICE<<"doing conversion REPLACE_ALPHA_WITH_LUMINANCE_INVERTED"<<std::endl;
+            osg::modifyImage(image, ReplaceAlphaWithLuminanceInvertedOperator());
+            return image;
+        }
         case (REPLACE_RGB_WITH_LUMINANCE):
         {
             OSG_NOTICE<<"doing conversion REPLACE_RGB_WITH_LUMINANCE"<<std::endl;
